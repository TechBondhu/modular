// src/ruleflow.js
import { displayMessage } from './uiUtils.js';
import { displayReview } from './reviewUtils.js';
import { saveSubmission } from './submissionUtils.js';
import { elements } from './constants.js';
import { saveChatHistory } from './chatHistory.js';

// ‡¶∏‡¶¨ ‡¶´‡ßç‡¶≤‡ßã
export const flows = {
  nid_apply: {
    start: {
      question: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶ï‡¶ø Birth Registration ‡¶è‡¶¨‡¶Ç SSC Marksheet ‡¶Ü‡¶õ‡ßá?",
      type: "yesno",
      yes: "upload_docs",
      no: "nid_long_form"
    },
    upload_docs: {
      question: "‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá Birth Registration ‡¶è‡¶¨‡¶Ç SSC Marksheet ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      type: "file",
      next: "nid_short_form"
    },
    nid_short_form: {
      question: "‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:",
      type: "text",
      next: "review"
    },
    nid_long_form: {
      question: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:",
      type: "text",
      next: "father_name"
    },
    father_name: {
      question: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:",
      type: "text",
      next: "mother_name"
    },
    mother_name: {
      question: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶æ‡ßü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:",
      type: "text",
      next: "dob"
    },
    dob: {
      question: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (DD-MM-YYYY):",
      type: "text",
      next: "address"
    },
    address: {
      question: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:",
      type: "text",
      next: "review"
    },
    review: { type: "review" }
  }
};

// ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
let activeFlow = null;
let currentStep = null;
let userData = {};
let isReviewMode = false;

// ‚úÖ ‡¶´‡ßç‡¶≤‡ßã ‡¶∂‡ßÅ‡¶∞‡ßÅ
export function startFlow(flowName) {
  console.log(`[FLOW START] Flow name: ${flowName}`);
  activeFlow = flows[flowName];
  if (!activeFlow) {
    console.error(`‚ùå Flow not found: ${flowName}`);
    return;
  }
  currentStep = "start";
  userData = {};
  isReviewMode = false;

  const firstQ = activeFlow[currentStep]?.question;
  if (!firstQ) {
    console.error("‚ùå Starting question missing in flow!");
    return;
  }

  console.log(`[QUESTION] ${firstQ}`);
  displayMessage(firstQ, 'bot', 'left');
}

// ‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
export function handleFormFlow(userMessage) {
  if (!activeFlow || !currentStep) {
    console.warn("‚ö†Ô∏è No active flow running!");
    return;
  }

  const step = activeFlow[currentStep];
  console.log(`\n[STEP] ${currentStep} | Type: ${step.type} | User said: ${userMessage}`);

  // ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶∏‡ßá‡¶≠
  if (step.type === "text" || step.type === "yesno") {
    userData[currentStep] = userMessage;
    console.log(`[SAVE] ${currentStep}: ${userMessage}`);
  } else if (step.type === "file") {
    userData[currentStep] = "[Uploaded File]";
    console.log(`[SAVE] File uploaded placeholder`);
  }

  // ‚úÖ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï
  if (step.type === "yesno") {
    if (userMessage.includes("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å") || userMessage.toLowerCase().includes("yes")) {
      currentStep = step.yes;
      console.log(`[BRANCH] YES ‚Üí ${currentStep}`);
    } else {
      currentStep = step.no;
      console.log(`[BRANCH] NO ‚Üí ${currentStep}`);
    }
  } else if (step.type === "file" || step.type === "text") {
    currentStep = step.next;
    console.log(`[NEXT] ‚Üí ${currentStep}`);
  } else if (step.type === "review" && !isReviewMode) {
    console.log("üü© Review stage reached!");
    isReviewMode = true;
    showReviewInterface();
    return;
  }

  // ‚úÖ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
  const nextStep = activeFlow[currentStep];
  if (nextStep && nextStep.question && !isReviewMode) {
    console.log(`[ASK] ${nextStep.question}`);
    displayMessage(nextStep.question, 'bot', 'left');
  } else if (!nextStep) {
    console.warn("‚ö†Ô∏è Next step not found!");
  }
}


 
