// src/ruleflow.js
import { displayMessage } from './uiUtils.js';
import { displayReview } from './reviewUtils.js';
import { saveChatHistory } from './chatHistory.js';

export const flows = {
  nid_apply: {
    start: {
      question: "ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржХрж┐ Birth Registration ржПржмржВ SSC Marksheet ржЖржЫрзЗ?",
      type: "yesno",
      yes: "upload_docs",
      no: "nid_long_form"
    },
    upload_docs: {
      question: "ржжржпрж╝рж╛ ржХрж░рзЗ Birth Registration ржмрж╛ SSC Marksheet ржПрж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи ЁЯУД",
      type: "file",
      next: "nid_short_form"
    },
    nid_short_form: {
      question: "ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "review"
    },
    nid_long_form: {
      question: "ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржкрж░рж┐ржЪрзЯржкрждрзНрж░ ржмрж╛ ржЖржкржирж╛рж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи ЁЯУ╕",
      type: "file",
      next: "nid_long_name"
    },
    nid_long_name: {
      question: "ржЖржкржирж╛рж░ ржкрзВрж░рзНржг ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "father_name"
    },
    father_name: {
      question: "ржЖржкржирж╛рж░ ржмрж╛ржмрж╛рж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "mother_name"
    },
    mother_name: {
      question: "ржЖржкржирж╛рж░ ржорж╛рзЯрзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "dob"
    },
    dob: {
      question: "ржЖржкржирж╛рж░ ржЬржирзНржо рждрж╛рж░рж┐ржЦ рж▓рж┐ржЦрзБржи (DD-MM-YYYY):",
      type: "text",
      next: "address"
    },
    address: {
      question: "ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржарж┐ржХрж╛ржирж╛ рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "review"
    },
    review: { type: "review" }
  }
};

// ЁЯФ╣ ржЧрзНрж▓рзЛржмрж╛рж▓ рж╕рзНржЯрзЗржЯ
let activeFlow = null;
let currentStep = null;
let userData = {};
let isReviewMode = false;

// тЬЕ ржлрзНрж▓рзЛ рж╢рзБрж░рзБ
export function startFlow(flowName) {
  console.log(`[FLOW START] ${flowName}`);
  activeFlow = flows[flowName];
  currentStep = "start";
  userData = {};
  isReviewMode = false;
  displayMessage(activeFlow[currentStep].question, 'bot', 'left');
}

// тЬЕ ржЗржЙржЬрж╛рж░рзЗрж░ ржЗржиржкрзБржЯ рж╣рзНржпрж╛ржирзНржбрж▓ ржХрж░рж╛
export function handleFormFlow(userMessage, uploadedFile = null) {
  if (!activeFlow || !currentStep) return;

  const step = activeFlow[currentStep];
  console.log(`[STEP] ${currentStep} (${step.type}) | msg: ${userMessage}`);

  // ЁЯФ╣ рж╣рзНржпрж╛ржБ/ржирж╛, ржЯрзЗржХрзНрж╕ржЯ ржЗржиржкрзБржЯ
  if (step.type === "text" || step.type === "yesno") {
    userData[currentStep] = userMessage;
  }

  // ЁЯФ╣ ржЗржорзЗржЬ ржлрж╛ржЗрж▓ ржЗржиржкрзБржЯ
  if (step.type === "file" && uploadedFile) {
    console.log("ЁЯУ╕ File received:", uploadedFile.name);

    const reader = new FileReader();
    reader.onload = function (e) {
      const imageUrl = e.target.result;
      userData[currentStep] = imageUrl;

      displayMessage("тЬЕ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ!", "bot", "left");

      // тПня╕П ржкрж░ржмрж░рзНрждрзА рж╕рзНржЯрзЗржкрзЗ ржпрж╛ржУрзЯрж╛
      currentStep = step.next;
      console.log(`ЁЯФБ Moving to next step: ${currentStep}`);

      setTimeout(() => {
        moveToNextStep();
      }, 300);
    };

    reader.onerror = function () {
      console.error("тЭМ File read error");
      displayMessage("ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", "bot", "left");
    };

    reader.readAsDataURL(uploadedFile);
    return; // ржПржЦрж╛ржирзЗ return ржерж╛ржХрж╛ ржЦрзБржм ржЬрж░рзБрж░рж┐
  }

  // ЁЯФ╣ yes/no logic
  if (step.type === "yesno") {
    if (userMessage.includes("рж╣рзНржпрж╛ржБ") || userMessage.toLowerCase().includes("yes")) {
      currentStep = step.yes;
    } else {
      currentStep = step.no;
    }
  } else if (step.type === "text") {
    currentStep = step.next;
  }

  moveToNextStep();
}

// тЬЕ ржкрж░ржмрж░рзНрждрзА рж╕рзНржЯрзЗржкрзЗ ржпрж╛ржУрзЯрж╛рж░ ржлрж╛ржВрж╢ржи
function moveToNextStep() {
  const step = activeFlow[currentStep];
  if (!step) return;

  if (step.type === "review" && !isReviewMode) {
    console.log("ЁЯЯй Review Phase Starting...");
    isReviewMode = true;
    showNidReview(userData);
    return;
  }

  if (step.question && !isReviewMode) {
    console.log(`ЁЯЯв Next question: ${step.question}`);
    displayMessage(step.question, 'bot', 'left');
  }
}

// тЬЕ рж░рж┐ржнрж┐ржЙ рж╕рзЗржХрж╢ржи (ржкрзБрж░ржирзЛ reviewUtils ржмрзНржпржмрж╣рж╛рж░)
function showNidReview(formData) {
  console.log("ЁЯУЛ Showing NID Review using reviewUtils.js");
  console.log("ЁЯз╛ FormData:", formData);

  const reviewData = {
    ржирж╛ржо: formData.nid_long_name || '',
    ржкрж┐рждрж╛: formData.father_name || '',
    ржорж╛рждрж╛: formData.mother_name || '',
    ржЬржирзНржо_рждрж╛рж░рж┐ржЦ: formData.dob || '',
    ржарж┐ржХрж╛ржирж╛: formData.address || '',
    ржорзЛржмрж╛ржЗрж▓: formData.nid_short_form || '',
    ржбржХрзБржорзЗржирзНржЯ: formData.upload_docs || '',
    ржЫржмрж┐: formData.nid_long_form || '',
    form_type: "NID Apply"
  };

  displayMessage("ржирж┐ржЪрзЗ ржЖржкржирж╛рж░ ржжрзЗржУрзЯрж╛ рждржерзНржпржЧрзБрж▓рзЛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи ЁЯСЗ", "bot", "left");
  displayReview(reviewData, "left");
  saveChatHistory("рж░рж┐ржнрж┐ржЙ ржкрзНрж░ржжрж░рзНрж╢ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ", "bot", "left");
}
