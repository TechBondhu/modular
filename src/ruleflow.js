// src/ruleflow.js
import { displayMessage } from './uiUtils.js';
import { displayReview } from './reviewUtils.js'; // saveSubmission рж╕рж░рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ
import { saveSubmission } from './submissionUtils.js'; // submissionUtils ржерзЗржХрзЗ ржЗржоржкрзЛрж░рзНржЯ
import { elements } from './constants.js';
import { saveChatHistory } from './chatHistory.js';


// рж╕ржм ржлрзНрж▓рзЛ ржПржЦрж╛ржирзЗ ржбрж┐ржлрж╛ржЗржи ржХрж░рж╛ рж╣ржмрзЗ
export const flows = {
  nid_apply: {
    start: {
      question: "ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржХрж┐ Birth Registration ржПржмржВ SSC Marksheet ржЖржЫрзЗ?",
      type: "yesno",
      yes: "upload_docs",
      no: "nid_long_form"
    },
    upload_docs: {
      question: "ржжрзЯрж╛ ржХрж░рзЗ Birth Registration ржПржмржВ SSC Marksheet ржЖржкрж▓рзЛржб ржХрж░рзБржиред",
      type: "file",
      next: "nid_short_form"
    },
    nid_short_form: {
      question: "ржжрзЯрж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "review"
    },
    nid_long_form: {
      question: "ржЖржкржирж╛рж░ ржкрзВрж░рзНржг ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "father_name"
    },
    father_name: {
      question: "ржЖржкржирж╛рж░ ржмрж╛ржмрж╛рж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "mother_name"
    },
    mother_name: {
      question: "ржЖржкржирж╛рж░ ржорж╛рзЯрзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "dob"
    },
    dob: {
      question: "ржЖржкржирж╛рж░ ржЬржирзНржо рждрж╛рж░рж┐ржЦ рж▓рж┐ржЦрзБржи (DD-MM-YYYY):",
      type: "text",
      next: "address"
    },
    address: {
      question: "ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржарж┐ржХрж╛ржирж╛ рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "review"
    },
    review: { type: "review" }
  }
};

// рж╕рзНржЯрзЗржЯ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ
let activeFlow = null;
let currentStep = null;
let userData = {};
let isReviewMode = false;

// ржлрзНрж▓рзЛ рж╢рзБрж░рзБ
export function startFlow(flowName) {
  activeFlow = flows[flowName];
  currentStep = "start";
  userData = {};
  isReviewMode = false;
  displayMessage(activeFlow[currentStep].question, 'bot', 'left');
}

// ржЗржЙржЬрж╛рж░рзЗрж░ ржЙрждрзНрждрж░ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛
export function handleFormFlow(userMessage) {
  if (!activeFlow || !currentStep) return;

  const step = activeFlow[currentStep];

  // ржЗржиржкрзБржЯ рж╕рзЗржн ржХрж░рж╛
  if (step.type === "text" || step.type === "yesno") {
    userData[currentStep] = userMessage;
  } else if (step.type === "file") {
    userData[currentStep] = "[Uploaded File]"; // ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржбрзЗрж░ рж╕ржоржпрж╝ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛ржмрзЗ
  }

  // ржХржирзНржЯрзНрж░рзЛрж▓ рж▓ржЬрж┐ржХ
  if (step.type === "yesno") {
    if (userMessage.includes("рж╣рзНржпрж╛ржБ") || userMessage.toLowerCase().includes("yes")) {
      currentStep = step.yes;
    } else {
      currentStep = step.no;
    }
  } else if (step.type === "file" || step.type === "text") {
    currentStep = step.next;
  } else if (step.type === "review" && !isReviewMode) {
    // Review ржорзЛржб ржЪрж╛рж▓рзБ
    isReviewMode = true;
    showReviewInterface();
    return;
  }

  // ржкрж░ржмрж░рзНрждрзА ржкрзНрж░рж╢рзНржи
  const nextStep = activeFlow[currentStep];
  if (nextStep && nextStep.question && !isReviewMode) {
    displayMessage(nextStep.question, 'bot', 'left');
  }
}

// Review ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ ржжрзЗржЦрж╛ржирзЛ
function showReviewInterface() {
  if (!elements.messagesDiv) return;
  elements.messagesDiv.innerHTML += `
    <div class="review-container" id="reviewContainer">
      <h3>ржЖржмрзЗржжржи ржкрж░рзНржпрж╛рж▓рзЛржЪржирж╛</h3>
      ${Object.entries(userData).map(([key, value]) => `
        <div class="review-item">
          <label>${key.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}:</label>
          <input type="text" class="review-input" value="${value}" data-key="${key}">
        </div>
      `).join('')}
      <button class="confirm-btn" id="confirmBtn">ржХржиржлрж╛рж░рзНржо</button>
      <button class="edit-btn" id="editBtn">ржПржбрж┐ржЯ</button>
    </div>
  `;

  // Edit ржмрж╛ржЯржирзЗрж░ ржЗржнрзЗржирзНржЯ
  document.getElementById('editBtn')?.addEventListener('click', () => {
    document.querySelectorAll('.review-input').forEach(input => input.disabled = false);
    displayMessage('ржбрж╛ржЯрж╛ ржПржбрж┐ржЯ ржХрж░рзБржи ржПржмржВ ржХржиржлрж╛рж░рзНржо ржХрж░рзБржиред', 'bot', 'left');
  });

  // Confirm ржмрж╛ржЯржирзЗрж░ ржЗржнрзЗржирзНржЯ
  document.getElementById('confirmBtn')?.addEventListener('click', () => {
    document.querySelectorAll('.review-input').forEach(input => {
      userData[input.getAttribute('data-key')] = input.value;
      input.disabled = true;
    });
    generatePDF(userData); // PDF рждрзИрж░рж┐
    displayMessage('ржЖржмрзЗржжржи ржХржиржлрж╛рж░рзНржо ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржПржмржВ PDF рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ!', 'bot', 'left');
    saveSubmission(userData, 'left'); // рж╕рж╛ржмржорж┐рж╢ржи рж╕рзЗржн
    isReviewMode = false; // ржлрзНрж▓рзЛ рж╢рзЗрж╖
  });

  displayReview(userData, 'left'); // ржкрзНрж░рж╛ржержорж┐ржХ рж░рж┐ржнрж┐ржЙ ржжрзЗржЦрж╛ржирзЛ
}

function showNidReview(formData) {
    const reviewData = {
        ржирж╛ржо: formData.name || '',
        ржкрж┐рждрж╛: formData.fatherName || '',
        ржорж╛рждрж╛: formData.motherName || '',
        ржЬржирзНржо_рждрж╛рж░рж┐ржЦ: formData.birthDate || '',
        ржарж┐ржХрж╛ржирж╛: formData.address || '',
        ржорзЛржмрж╛ржЗрж▓: formData.mobile || '',
        ржЫржмрж┐: formData.photoUrl || '',
        form_type: "NID Apply"
    };

    displayMessage("ржирж┐ржЪрзЗ ржЖржкржирж╛рж░ ржжрзЗржУржпрж╝рж╛ рждржерзНржпржЧрзБрж▓рзЛ рж░рж┐ржнрж┐ржЙ ржХрж░рзБржи ЁЯСЗ", "bot", "left");
    displayReview(reviewData, "left");
    saveChatHistory("рж░рж┐ржнрж┐ржЙ ржкрзНрж░ржжрж░рзНрж╢ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ", "bot", "left");
}
