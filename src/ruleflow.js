// тЬЕ src/ruleflow.js
import { displayMessage } from './uiUtils.js';
import { displayReview } from './reviewUtils.js';
import { saveChatHistory } from './chatHistory.js';

// --------------------------------------
// ЁЯФ╣ рж╕ржм рж░рзБрж▓-ржмрзЗржЗржЬржб ржлрзНрж▓рзЛ ржбрж┐ржлрж╛ржЗржи
// --------------------------------------
export const flows = {
  nid_apply: {
    start: {
      question: "ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржХрж┐ Birth Registration ржПржмржВ SSC Marksheet ржЖржЫрзЗ?",
      type: "yesno",
      yes: "upload_docs",
      no: "nid_long_form"
    },
    upload_docs: {
      question: "ржжржпрж╝рж╛ ржХрж░рзЗ Birth Registration ржЕржержмрж╛ SSC Marksheet ржПрж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи ЁЯУД",
      type: "file",
      next: "nid_short_form"
    },
    nid_short_form: {
      question: "ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "review"
    },
    nid_long_form: {
      question: "ржЖржкржирж╛рж░ ржкрзВрж░рзНржг ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "father_name"
    },
    father_name: {
      question: "ржЖржкржирж╛рж░ ржмрж╛ржмрж╛рж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "mother_name"
    },
    mother_name: {
      question: "ржЖржкржирж╛рж░ ржорж╛рзЯрзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "dob"
    },
    dob: {
      question: "ржЖржкржирж╛рж░ ржЬржирзНржо рждрж╛рж░рж┐ржЦ рж▓рж┐ржЦрзБржи (DD-MM-YYYY):",
      type: "text",
      next: "address"
    },
    address: {
      question: "ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржарж┐ржХрж╛ржирж╛ рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "review"
    },
    review: { type: "review" }
  }
};

// --------------------------------------
// ЁЯФ╣ рж╕рзНржЯрзЗржЯ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ
// --------------------------------------
let activeFlow = null;
let currentStep = null;
let userData = {};
let isReviewMode = false;

// --------------------------------------
// тЬЕ ржлрзНрж▓рзЛ рж╢рзБрж░рзБ
// --------------------------------------
export function startFlow(flowName) {
  console.log(`ЁЯЯв [FLOW START] ${flowName}`);
  activeFlow = flows[flowName];
  currentStep = "start";
  userData = {};
  isReviewMode = false;

  const firstQ = activeFlow[currentStep]?.question;
  if (firstQ) displayMessage(firstQ, 'bot', 'left');
  else console.error("тЭМ Flow start question not found!");
}

// --------------------------------------
// тЬЕ ржЗржЙржЬрж╛рж░рзЗрж░ ржЗржиржкрзБржЯ / ржлрж╛ржЗрж▓ ржЗржиржкрзБржЯ рж╣рзНржпрж╛ржирзНржбрж▓
// --------------------------------------
export function handleFormFlow(userMessage, uploadedFile = null) {
  if (!activeFlow || !currentStep) return;

  const step = activeFlow[currentStep];
  console.log(`тЮбя╕П [STEP] ${currentStep} (${step.type}) | msg: ${userMessage}`);

  // ЁЯФ╕ ржпржжрж┐ ржЗржорзЗржЬ ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣рзЯ
  if (step.type === "file" && uploadedFile) {
    console.log("ЁЯУ╕ File received:", uploadedFile.name);
    const reader = new FileReader();

    reader.onload = function (e) {
      const imageUrl = e.target.result;
      userData[currentStep] = imageUrl; // base64 рж╣рж┐рж╕рзЗржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг

      displayMessage("тЬЕ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ!", "bot", "left");
      console.log("ЁЯЦ╝я╕П Image stored in userData:", imageUrl.slice(0, 50) + "...");

      // ржкрж░ржмрж░рзНрждрзА ржзрж╛ржкрзЗ ржпрж╛ржУ
      currentStep = step.next;
      moveToNextStep();
    };

    reader.onerror = function () {
      console.error("тЭМ File read error");
      displayMessage("ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", "bot", "left");
    };

    reader.readAsDataURL(uploadedFile);
    return; // ржПржЦрж╛ржирзЗ return ржжрж░ржХрж╛рж░ ржХрж╛рж░ржг ржлрж╛ржЗрж▓ ржкрзЬрж╛ asynchronous
  }

  // ЁЯФ╕ рж╕рж╛ржзрж╛рж░ржг ржЗржиржкрзБржЯ (ржЯрзЗржХрзНрж╕ржЯ / рж╣рзНржпрж╛ржБ-ржирж╛)
  if (step.type === "text" || step.type === "yesno") {
    userData[currentStep] = userMessage;
  }

  // ЁЯФ╕ ржкрж░ржмрж░рзНрждрзА рж╕рзНржЯрзЗржк ржирж┐рж░рзНржзрж╛рж░ржг
  if (step.type === "yesno") {
    if (userMessage.includes("рж╣рзНржпрж╛ржБ") || userMessage.toLowerCase().includes("yes")) {
      currentStep = step.yes;
    } else {
      currentStep = step.no;
    }
  } else if (step.type === "text") {
    currentStep = step.next;
  }

  // ЁЯФ╕ ржпржжрж┐ ржкрж░ржмрж░рзНрждрзА рж╕рзНржЯрзЗржк review рж╣рзЯ тЖТ ржЕржЯрзЛ рж░рж┐ржнрж┐ржЙ ржжрзЗржЦрж╛ржУ
  if (currentStep === "review" && !isReviewMode) {
    console.log("ЁЯЯй Auto Review Phase Starting...");
    isReviewMode = true;
    showNidReview(userData);
    return;
  }

  // ЁЯФ╕ ржпржжрж┐ ржкрж░ржмрж░рзНрждрзА ржкрзНрж░рж╢рзНржи ржерж╛ржХрзЗ
  moveToNextStep();
}

// --------------------------------------
// тЬЕ рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи тАФ ржкрж░ржмрж░рзНрждрзА ржкрзНрж░рж╢рзНржи ржжрзЗржЦрж╛ржирзЛ
// --------------------------------------
function moveToNextStep() {
  const nextStep = activeFlow[currentStep];
  if (nextStep && nextStep.question && !isReviewMode) {
    console.log(`ЁЯЯв Next Question: ${nextStep.question}`);
    displayMessage(nextStep.question, "bot", "left");

    // ЁЯУВ ржпржжрж┐ ржлрж╛ржЗрж▓ ржЗржиржкрзБржЯ рж╣ржпрж╝, UI рждрзЗ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржмрж╛ржЯржи ржжрзЗржЦрж╛ржУ
    if (nextStep.type === "file") {
      addFileUploadInput();
    }
  } else {
    console.log("тД╣я╕П No further step or review started.");
  }
}

// --------------------------------------
// тЬЕ UI рждрзЗ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржЗржиржкрзБржЯ ржпрзБржХрзНржд ржХрж░рж╛
// --------------------------------------
function addFileUploadInput() {
  const uploadContainer = document.createElement("div");
  uploadContainer.classList.add("file-upload-container", "slide-in");

  const fileInput = document.createElement("input");
  fileInput.type = "file";
  fileInput.accept = "image/*";
  fileInput.classList.add("upload-input");

  const uploadLabel = document.createElement("label");
  uploadLabel.textContent = "ЁЯУд ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржбржХрзБржорзЗржирзНржЯ ржЖржкрж▓рзЛржб ржХрж░рзБржи";
  uploadLabel.classList.add("upload-label");

  uploadContainer.appendChild(uploadLabel);
  uploadContainer.appendChild(fileInput);

  document.querySelector(".messages.left")?.appendChild(uploadContainer);

  fileInput.addEventListener("change", () => {
    const file = fileInput.files[0];
    if (file) {
      handleFormFlow("", file); // тЬЕ ржПржЦрж╛ржирзЗ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржлрж╛ржЗрж▓ ржкрж╛рж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      uploadContainer.remove(); // ржЖржкрж▓рзЛржбрзЗрж░ ржкрж░рзЗ ржЗржиржкрзБржЯ рж╣рж╛ржЗржб ржХрж░рж╛
    }
  });
}

// --------------------------------------
// тЬЕ ржкрзБрж░ржирзЛ reviewUtils.js ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж░рж┐ржнрж┐ржЙ ржжрзЗржЦрж╛ржирзЛ
// --------------------------------------
function showNidReview(formData) {
  console.log("ЁЯУЛ Showing NID Review (from reviewUtils.js)");
  console.log("ЁЯз╛ FormData Snapshot:", JSON.stringify(formData, null, 2));

  const reviewData = {
    ржирж╛ржо: formData.nid_long_form || '',
    ржкрж┐рждрж╛: formData.father_name || '',
    ржорж╛рждрж╛: formData.mother_name || '',
    ржЬржирзНржо_рждрж╛рж░рж┐ржЦ: formData.dob || '',
    ржарж┐ржХрж╛ржирж╛: formData.address || '',
    ржорзЛржмрж╛ржЗрж▓: formData.nid_short_form || '',
    ржбржХрзБржорзЗржирзНржЯ: formData.upload_docs || '',
    form_type: "NID Apply"
  };

  displayMessage("ржирж┐ржЪрзЗ ржЖржкржирж╛рж░ ржжрзЗржУрзЯрж╛ рждржерзНржпржЧрзБрж▓рзЛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи ЁЯСЗ", "bot", "left");
  displayReview(reviewData, "left");
  saveChatHistory("рж░рж┐ржнрж┐ржЙ ржкрзНрж░ржжрж░рзНрж╢ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ", "bot", "left");

  console.log("тЬЕ Review rendered successfully.");
}
