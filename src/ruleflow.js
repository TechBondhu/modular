// тЬЕ src/ruleflow.js
import { displayMessage } from './uiUtils.js';
import { displayReview } from './reviewUtils.js';
import { saveChatHistory } from './chatHistory.js';

// --------------------------------------
// ЁЯФ╣ ржлрзНрж▓рзЛ ржбрж┐ржлрж╛ржЗржи
// --------------------------------------
export const flows = {
  nid_apply: {
    start: {
      question: "ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржХрж┐ Birth Registration ржмрж╛ SSC Marksheet ржЖржЫрзЗ?",
      type: "yesno",
      yes: "upload_docs",
      no: "nid_long_form"
    },
    upload_docs: {
      question: "ржжржпрж╝рж╛ ржХрж░рзЗ Birth Registration ржмрж╛ SSC Marksheet ржПрж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи ЁЯУД",
      type: "file",
      next: "nid_short_form"
    },
    nid_short_form: {
      question: "ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "review"
    },
    nid_long_form: {
      question: "ржЖржкржирж╛рж░ ржПржХржЯрж┐ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи ЁЯкк",
      type: "file",
      next: "nid_name"
    },
    nid_name: {
      question: "ржЖржкржирж╛рж░ ржкрзВрж░рзНржг ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "father_name"
    },
    father_name: {
      question: "ржЖржкржирж╛рж░ ржмрж╛ржмрж╛рж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "mother_name"
    },
    mother_name: {
      question: "ржЖржкржирж╛рж░ ржорж╛ржпрж╝рзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "dob"
    },
    dob: {
      question: "ржЖржкржирж╛рж░ ржЬржирзНржо рждрж╛рж░рж┐ржЦ рж▓рж┐ржЦрзБржи (DD-MM-YYYY):",
      type: "text",
      next: "address"
    },
    address: {
      question: "ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржарж┐ржХрж╛ржирж╛ рж▓рж┐ржЦрзБржи:",
      type: "text",
      next: "review"
    },
    review: { type: "review" }
  }
};

// --------------------------------------
// ЁЯФ╣ рж╕рзНржЯрзЗржЯ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ
// --------------------------------------
let activeFlow = null;
let currentStep = null;
let userData = {};
let isReviewMode = false;

// --------------------------------------
// тЬЕ ржлрзНрж▓рзЛ рж╢рзБрж░рзБ
// --------------------------------------
export function startFlow(flowName) {
  console.log(`ЁЯЯв [FLOW START] ${flowName}`);
  activeFlow = flows[flowName];
  currentStep = "start";
  userData = {};
  isReviewMode = false;

  const firstQ = activeFlow[currentStep]?.question;
  if (firstQ) displayMessage(firstQ, 'bot', 'left');
  else console.error("тЭМ Flow start question not found!");
}

// --------------------------------------
// тЬЕ ржЗржиржкрзБржЯ/ржЗржорзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓
// --------------------------------------
export function handleFormFlow(userMessage, uploadedFile = null) {
  if (!activeFlow || !currentStep) return;

  const step = activeFlow[currentStep];
  console.log(`тЮбя╕П [STEP] ${currentStep} (${step.type}) | msg: ${userMessage}`);

  // ЁЯФ╣ ржЗржорзЗржЬ ржлрж╛ржЗрж▓ ржЗржиржкрзБржЯ рж╣рзНржпрж╛ржирзНржбрж▓ ржХрж░рж╛
  if (step.type === "file" && uploadedFile) {
    console.log("ЁЯУ╕ File received:", uploadedFile.name);

    const reader = new FileReader();
    reader.onload = function (e) {
      const imageUrl = e.target.result;
      userData[currentStep] = imageUrl; // base64 рж╣рж┐рж╕рзЗржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг

      displayMessage("тЬЕ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ!", "bot", "left");
      console.log("ЁЯЦ╝я╕П Image stored in userData:", imageUrl.slice(0, 40) + "...");

      currentStep = step.next;
      moveToNextStep();
    };

    reader.onerror = function () {
      console.error("тЭМ File read error");
      displayMessage("ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", "bot", "left");
    };

    reader.readAsDataURL(uploadedFile);
    return; // тЪб async ржлрж╛ржЗрж▓ рж▓рзЛржб рж╢рзЗрж╖ ржирж╛ рж╣ржУржпрж╝рж╛ ржкрж░рзНржпржирзНржд return
  }

  // ЁЯФ╣ ржЯрзЗржХрзНрж╕ржЯ ржЗржиржкрзБржЯ ржмрж╛ рж╣рзНржпрж╛ржБ-ржирж╛ ржЗржиржкрзБржЯ
  if (step.type === "text" || step.type === "yesno") {
    userData[currentStep] = userMessage;
  }

  // ЁЯФ╣ ржирзЗржХрзНрж╕ржЯ рж╕рзНржЯрзЗржк ржирж┐рж░рзНржзрж╛рж░ржг
  if (step.type === "yesno") {
    if (userMessage.includes("рж╣рзНржпрж╛ржБ") || userMessage.toLowerCase().includes("yes")) {
      currentStep = step.yes;
    } else {
      currentStep = step.no;
    }
  } else if (step.type === "text") {
    currentStep = step.next;
  }

  // ЁЯФ╣ рж░рж┐ржнрж┐ржЙ ржлрзЗржЬ
  if (currentStep === "review" && !isReviewMode) {
    console.log("ЁЯЯй Auto Review Phase Starting...");
    isReviewMode = true;
    showNidReview(userData);
    return;
  }

  // ЁЯФ╣ ржкрж░ржмрж░рзНрждрзА ржкрзНрж░рж╢рзНржи
  moveToNextStep();
}

// --------------------------------------
// тЬЕ рж╣рзЗрж▓рзНржкрж╛рж░ тАФ ржкрж░ржмрж░рзНрждрзА ржкрзНрж░рж╢рзНржи
// --------------------------------------
function moveToNextStep() {
  const nextStep = activeFlow[currentStep];
  if (nextStep && nextStep.question && !isReviewMode) {
    displayMessage(nextStep.question, "bot", "left");
    console.log(`ЁЯЯв Next question: ${nextStep.question}`);

    // ржпржжрж┐ ржлрж╛ржЗрж▓ ржЗржиржкрзБржЯ рж╣ржпрж╝ рждрж╛рж╣рж▓рзЗ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб UI ржпрзЛржЧ ржХрж░рзЛ
    if (nextStep.type === "file") {
      addFileUploadInput();
    }
  } else {
    console.log("тД╣я╕П No further question or review started.");
  }
}

// --------------------------------------
// тЬЕ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржЗржиржкрзБржЯ рждрзИрж░рж┐
// --------------------------------------
function addFileUploadInput() {
  const uploadContainer = document.createElement("div");
  uploadContainer.classList.add("file-upload-container", "slide-in");

  const fileInput = document.createElement("input");
  fileInput.type = "file";
  fileInput.accept = "image/*";
  fileInput.classList.add("upload-input");

  const uploadLabel = document.createElement("label");
  uploadLabel.textContent = "ЁЯУд ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржЫржмрж┐ ржмрж╛ ржбржХрзБржорзЗржирзНржЯ ржЖржкрж▓рзЛржб ржХрж░рзБржи";
  uploadLabel.classList.add("upload-label");

  uploadContainer.appendChild(uploadLabel);
  uploadContainer.appendChild(fileInput);

  document.querySelector(".messages.left")?.appendChild(uploadContainer);

  fileInput.addEventListener("change", () => {
    const file = fileInput.files[0];
    if (file) {
      handleFormFlow("", file); // тЬЕ ржЗржорзЗржЬ ржкрж╛рж╕ ржХрж░рзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      uploadContainer.remove();
    }
  });
}

// --------------------------------------
// тЬЕ рж░рж┐ржнрж┐ржЙ (рждрзЛржорж╛рж░ reviewUtils.js рж╕рж┐рж╕рзНржЯрзЗржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ)
// --------------------------------------
function showNidReview(formData) {
  console.log("ЁЯУЛ Showing NID Review (from reviewUtils.js)");
  console.log("ЁЯз╛ FormData Snapshot:", JSON.stringify(formData, null, 2));

  const reviewData = {
    ржирж╛ржо: formData.nid_name || '',
    ржкрж┐рждрж╛: formData.father_name || '',
    ржорж╛рждрж╛: formData.mother_name || '',
    ржЬржирзНржо_рждрж╛рж░рж┐ржЦ: formData.dob || '',
    ржарж┐ржХрж╛ржирж╛: formData.address || '',
    ржорзЛржмрж╛ржЗрж▓: formData.nid_short_form || '',
    ржбржХрзБржорзЗржирзНржЯ: formData.upload_docs || '',
    ржЖржмрзЗржжржиржХрж╛рж░рзАрж░_ржЫржмрж┐: formData.nid_long_form || '', // long form image
    form_type: "NID Apply"
  };

  displayMessage("ржирж┐ржЪрзЗ ржЖржкржирж╛рж░ ржжрзЗржУржпрж╝рж╛ рждржерзНржпржЧрзБрж▓рзЛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи ЁЯСЗ", "bot", "left");
  displayReview(reviewData, "left");
  saveChatHistory("рж░рж┐ржнрж┐ржЙ ржкрзНрж░ржжрж░рзНрж╢ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ", "bot", "left");

  console.log("тЬЕ Review rendered successfully.");
}
